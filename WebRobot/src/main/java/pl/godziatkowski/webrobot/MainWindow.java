/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pl.godziatkowski.webrobot;

import java.io.IOException;
import java.util.List;
import java.util.Objects;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import pl.godziatkowski.webrobot.index.PageIndexingFacade;
import pl.godziatkowski.webrobot.query.Modificator;
import pl.godziatkowski.webrobot.query.PageSearcher;
import pl.godziatkowski.webrobot.query.SearchResult;
import pl.godziatkowski.webrobot.shared.IndexField;

/**
 * TODO: 2) handle robot.txt during page indexing 3) use Highlighter to display
 * matched text
 *
 * @author Godzio
 */
public class MainWindow extends javax.swing.JFrame {

    private static final String TABLE_HEADER = "<thead style=\"border: black 1px solid;\"><tr style=\"border: black 1px solid;\"><td style=\"border: black 1px solid;\">Found page</td><td style=\"border: black 1px solid;\">Similiar page</td></tr></thead>";

    private final PageIndexingFacade pageIndexingFacade;
    private final PageSearcher pageSearcher;

    public MainWindow() throws IOException {
        initComponents();
        pageIndexingFacade = new PageIndexingFacade(this);
        pageSearcher = new PageSearcher();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        leftPanel = new javax.swing.JPanel();
        indexButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        queryTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        queryTypeSelect = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        orRadio = new javax.swing.JRadioButton();
        andRadio = new javax.swing.JRadioButton();
        exactRadio = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logPanel = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        indexButton.setText("Index pages");
        indexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search query");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Query type");

        queryTypeSelect.setModel(new javax.swing.DefaultComboBoxModel<>(pl.godziatkowski.webrobot.shared.IndexField.getArrayOfValues()));

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Search modificators");

        buttonGroup1.add(orRadio);
        orRadio.setSelected(true);
        orRadio.setText("OR");

        buttonGroup1.add(andRadio);
        andRadio.setText("AND");

        buttonGroup1.add(exactRadio);
        exactRadio.setText("Exact phrase");

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(indexButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(queryTextField)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(queryTypeSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(orRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(andRadio, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exactRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(indexButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(queryTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(queryTypeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orRadio, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(andRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exactRadio)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton)
                .addContainerGap(353, Short.MAX_VALUE))
        );

        logPanel.setEditable(false);
        logPanel.setContentType("text/html"); // NOI18N
        jScrollPane1.setViewportView(logPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(leftPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(leftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        try {
            String query = this.queryTextField.getText();
            IndexField queryType = getIndexField();
            Modificator modificator = getModificator();
            List<SearchResult> result = pageSearcher.searchForPage(query, queryType, modificator);
            displaySearchResult(result, query, queryType);
        } catch (IOException ex) {
            logError("Error during search");
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private IndexField getIndexField() {
        IndexField queryType = IndexField.getFromString(this.queryTypeSelect.getSelectedItem().toString());

        return queryType.equals(IndexField.ADDRESS) ? IndexField.SEARCH : queryType;
    }

    private Modificator getModificator() {
        Modificator m;
        if (orRadio.isSelected()) {
            m = Modificator.OR;
        } else if (andRadio.isSelected()) {
            m = Modificator.AND;
        } else {
            m = Modificator.EXACT;
        }
        return m;
    }

    private void displaySearchResult(List<SearchResult> result, String query, IndexField queryType) {
        if (result.isEmpty()) {
            StringBuilder logResultBuilder = new StringBuilder("<br/></br> <h2>Searching for \"");
            logResultBuilder.append(query);
            logResultBuilder.append("\" in ");
            logResultBuilder.append(queryType.value);
            logResultBuilder.append("returned 0 matching results</h2><br/>");
        } else {
            StringBuilder logResultBuilder = new StringBuilder("<br/></br> <h2>Searching for \"");
            logResultBuilder.append(query);
            logResultBuilder.append("\" in ");
            logResultBuilder.append(queryType.value);
            logResultBuilder.append("</h2><br/>");
            logResultBuilder.append("<table style=\"border: black 1px solid; padding: 10px;\">");
            logResultBuilder.append(TABLE_HEADER);
            logResultBuilder.append("<tbody>");
            result.forEach(searchResult -> {
                //single table row
                logResultBuilder.append("<tr style=\"border: black 1px solid;\"><td style=\"border: black 1px solid; padding: 10px;\">");
                logResultBuilder.append(searchResult.getDocument().get(IndexField.ADDRESS.value));
                logResultBuilder.append("</td><td style=\"border: black 1px solid; padding: 10px;\">");
                if (Objects.nonNull(searchResult.getSimiliarDocument())) {
                    logResultBuilder.append(searchResult.getSimiliarDocument().get(IndexField.ADDRESS.value));
                } else {
                    logResultBuilder.append("No similiar page found");
                }
                logResultBuilder.append("</td></tr>");
                //end of single table row
            });
            logResultBuilder.append("</tbody></table>");
            long countOfMatchedTexts = result.stream()
                    .map(SearchResult::getMatchedFragments)
                    .filter(Objects::nonNull)
                    .flatMap(x -> x.stream())
                    .count();

            if (queryType.equals(IndexField.CONTENT) && countOfMatchedTexts > 0) {
                logResultBuilder.append("<br/><h3>Matched texts</h3>");
                result.stream()
                        .filter(sr -> !sr.getMatchedFragments().isEmpty())
                        .forEach(searchResult -> {
                            logResultBuilder.append("<br/><div>");
                            logResultBuilder.append(searchResult.getDocument().get(IndexField.ADDRESS.value));
                            logResultBuilder.append("<div><br/>");
                            searchResult.getMatchedFragments()
                                    .forEach(matchedText -> {
                                        logResultBuilder.append(matchedText);
                                        logResultBuilder.append("<br/>");
                                    });
                        });
            }
            log(logResultBuilder.toString());
        }
    }

    private void indexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexButtonActionPerformed
        String address = JOptionPane.showInputDialog("Address:");
        if (Objects.nonNull(address)) {
            logIndexing(address);
            pageIndexingFacade.indexFromPage(address);
        }
    }//GEN-LAST:event_indexButtonActionPerformed

    public void logIndexing(String address) {
        String line = "<div>Indexing pages starting from \"" + address + "\"</div>";
        log(line);
    }

    public void logError(String errorMessage) {
        String line = "<div style=\"color: red;\">" + errorMessage + "</div>";
        log(line);
    }

    public void logMessage(String message) {
        String line = "<div>" + message + "</div>";
        log(line);
    }

    public void logNumberOfIndexedPages(int countOfLinks) {
        String line = "<div style=\"color: blue; font-weight:bold;\"> Indexed " + countOfLinks + " pages</div>";
        log(line);
    }

    private void log(String info) {
        try {
            HTMLDocument doc = (HTMLDocument) logPanel.getDocument();
            HTMLEditorKit editorKit = (HTMLEditorKit) logPanel.getEditorKit();
            editorKit.insertHTML(doc, doc.getLength(), info, 0, 0, null);
        } catch (BadLocationException | IOException ex) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainWindow().setVisible(true);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(null, "Error creating index. Shutting down application");
                    System.exit(0);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton andRadio;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JRadioButton exactRadio;
    private javax.swing.JButton indexButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JTextPane logPanel;
    private javax.swing.JRadioButton orRadio;
    private javax.swing.JTextField queryTextField;
    private javax.swing.JComboBox<String> queryTypeSelect;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables

}
